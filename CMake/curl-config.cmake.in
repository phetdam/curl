#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
###########################################################################
@PACKAGE_INIT@

if(UNIX OR VCPKG_TOOLCHAIN OR (MINGW AND NOT CMAKE_CROSSCOMPILING))  # Keep in sync with root CMakeLists.txt
  set(_curl_use_pkgconfig_default ON)
else()
  set(_curl_use_pkgconfig_default OFF)
endif()
option(CURL_USE_PKGCONFIG "Enable pkg-config to detect @PROJECT_NAME@ dependencies" ${_curl_use_pkgconfig_default})

include(CMakeFindDependencyMacro)
if("@USE_OPENSSL@")
  find_dependency(OpenSSL "@OPENSSL_VERSION_MAJOR@")
endif()
if("@HAVE_LIBZ@")
  find_dependency(ZLIB "@ZLIB_VERSION_MAJOR@")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")

# supported protocols and features
set(CURL_SUPPORTED_PROTOCOLS "@CURL_SUPPORTED_PROTOCOLS_LIST@")
set(CURL_SUPPORTED_FEATURES "@CURL_SUPPORTED_FEATURES_LIST@")

# set located components if requested
# for each user-requested component <comp>, CURL_<comp>_FOUND is set to TRUE
foreach(_req_comp ${CURL_FIND_COMPONENTS})
  # first check features
  list(FIND CURL_SUPPORTED_FEATURES ${_req_comp} CURL_${_req_comp}_POS)
  # if not found, try again
  if(CURL_${_req_comp}_POS EQUAL -1)
    list(FIND CURL_SUPPORTED_PROTOCOLS ${_req_comp} CURL_${_req_comp}_POS)
  endif()
  # failed
  if(CURL_${_req_comp}_POS EQUAL -1)
    # if REQUIRED was given, hard error
    if(CURL_FIND_REQUIRED_${_req_comp} AND CURL_FIND_REQUIRED)
      message(FATAL_ERROR "CURL: missing component: ${_req_comp}")
    # otherwise, just notify
    else()
      message(STATUS "CURL: missing component: ${_req_comp}")
    endif()
  # success, so mark component as found. this is necessary for correct
  # interop with find_package_handle_standard_args and optional components
  else()
    set(CURL_${_req_comp}_FOUND TRUE)
  endif()
  # unset unused variable
  unset(CURL_${_req_comp}_POS)
endforeach()

# Alias for either shared or static library
if(NOT TARGET @PROJECT_NAME@::libcurl)
  add_library(@PROJECT_NAME@::libcurl ALIAS @PROJECT_NAME@::@LIB_SELECTED@)
endif()

# For compatibility with CMake's FindCURL.cmake
set(CURL_LIBRARIES @PROJECT_NAME@::libcurl)
set_and_check(CURL_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
